package ca.rileyman.website.blog.service.impl;

import java.util.Collection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import ca.rileyman.website.blog.dao.BlogPostDao;
import ca.rileyman.website.blog.model.BlogPost;
import ca.rileyman.website.blog.search.BlogPostNavSearch;
import ca.rileyman.website.blog.service.BlogPostService;
import ca.rileyman.website.blog.service.result.InitialBlogPostListResult;

/**
 * Application implementation of the blog post service.
 */
@Service
public class BlogPostServiceImpl
implements BlogPostService
{
	
	private static final Logger log = LoggerFactory.getLogger(BlogPostServiceImpl.class);
	
	private BlogPostDao blogPostDao;
	
	@SuppressWarnings("javadoc")
	@Autowired
	public BlogPostServiceImpl(BlogPostDao blogPostDao) {
		this.blogPostDao = blogPostDao;
	}
	
	@Transactional(propagation=Propagation.SUPPORTS, readOnly=true)
	public InitialBlogPostListResult loadInitialBlogPosts(String blogCode, int count) {
		log.debug("Entering with blogCode = <{}>", blogCode);
		log.debug("and count = <{}>", count);
		
		int blogPostCount = blogPostDao.getActiveBlogPostCount(blogCode);
		
		BlogPostNavSearch search = createInitialBlogPostNavSearch(blogCode, count);
		Collection<BlogPost> blogPostList = blogPostDao.loadActiveBlogPostsByNavSearch(search);
		
		InitialBlogPostListResult result = new InitialBlogPostListResult(blogPostCount, blogPostList);
		
		log.debug("Exiting");
		return result;
	}
	
	private BlogPostNavSearch createInitialBlogPostNavSearch(String blogCode, int count) {
		log.debug("Entering");
		
		BlogPostNavSearch result = new BlogPostNavSearch();
		result.setBlogCode(blogCode);
		result.setStartPos(1);
		result.setCount(count);
		
		if ( log.isDebugEnabled() ) {
			log.debug("Exiting with result = <{}>", result);
		}
		return result;
	}
	
	@Transactional(propagation=Propagation.SUPPORTS, readOnly=true)
	public Collection<BlogPost> loadActiveBlogPostsByNavSearch(BlogPostNavSearch search) {
		if ( log.isDebugEnabled() ) {
			log.debug("Entering with <{}>", search);
		}
		
		Collection<BlogPost> result = blogPostDao.loadActiveBlogPostsByNavSearch(search);
		
		log.debug("Exiting");
		return result;
	}
	
}
